import psutil

from loguru import logger

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.utils.markdown import hlink

from database.services import get_or_create_user_service, get_users_service

from functions.greeting import send_greeting

from elements.inline.other_inline import support_button
from events.states_group import Utils
from config.advertisement import support_link

router = Router()


# --- –û—Å–Ω–æ–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å --- #
@router.message(Command("start"))
async def start_cmd(message: Message, state: FSMContext):
    try:
        await get_or_create_user_service(user_id=message.from_user.id)
    except Exception as _ex:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç: {_ex}")

    await message.answer(
        text=f"{send_greeting(username=message.from_user.first_name)}"
    )


# --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å --- #
@router.message(Command("info"))
async def info_cmd(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
    if await state.get_state() is not None:
        await message.answer(
            text="üîé‚ú®",
        )
        await state.clear()

    botname = message.bot.config['SETTINGS']['name']
    message_text = (
        f"<b>–°–ü–†–ê–í–ö–ê {hlink(botname, support_link)} v{message.bot.config['SETTINGS']['version']}:</b>"
        f"\n\n –ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–æ—Ç–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç–µ—Å—å –∫ <b>{hlink('–≥—Ä—É–ø–ø–µ', support_link)}</b> –∏ –∑–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ –Ω—É–∂–Ω–æ–º —Ç–æ–ø–∏–∫–µ."
    )

    await message.answer(
        text=message_text,
        reply_markup=support_button().as_markup()
    )


# --- –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ --- #
@router.message(Command("statistic", "bin"))
async def statistic_cmd(message: Message):    
    if int(message.chat.id) in map(int, message.bot.ADMIN_CHATS):
        users_data = await get_users_service()
        if users_data:
            users_count = f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{len(users_data)}</code>"
        else:
            users_count = "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –Ω–µ—Ç</b>!"

        await message.answer(
            text=f"<b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê:</b>\
                \n\n{users_count}\
                \n\n<b>CPU:</b> <code>{psutil.cpu_percent(interval=1)}</code> | <b>RAM:</b> <code>{psutil.virtual_memory().percent}</code>%\
                \n<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:</b> <code>{psutil.disk_usage('/').percent}</code>%"
        )


# --- –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞—Å—Å—ã–ª–∫—É -> –ù–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç --- #
@router.message(Command("mailing", "bin2"))
async def mailing_cmd(message: Message, state: FSMContext):
    if int(message.chat.id) in map(int, message.bot.ADMIN_CHATS):
        # –ï—Å–ª–∏ —Å—Ç–∞–¥–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –Ω–µ—ë
        if await state.get_state() is not None:
            await state.clear()

        await message.answer(
            text="üí• –í–≤–µ–¥–∏—Ç–µ <u>—Ç–µ–∫—Å—Ç</u> –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ <u>–º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç</u>, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:", 
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(Utils.mailing)
